Object,Attributes,Methods
Restaurant,- name: String; - tables: List<Table>; - menu: List<Platter>; - staff: List<Staff>; - revenue: double; - avgWalkTime: double; - globals: GlobalVariables; - decisionEngine: GlobalMethods,+ registerLoggables(); + triggerLog(); + simulateDay(); + decideStaffing(); + decideTableAssignments(); + decideInventoryRestock(); + decideStaffing (uses Probability: + RushHourOverloadChance); decideInventoryRestock (uses Probability: IngredientSpoilageRate); + getGlobals(): GlobalVariables; + getDecisionEngine(): GlobalMethods; + evaluate(): boolean; + commit(): void; + getState(): String[][]
Hostess,- name: String,"+ registerLoggables(); + triggerLog(); + greetCustomer(Customer); + seatCustomer(Customer, Table); + decideTableAssignment(Customer); + releaseTableDecision(Table, Customer); + decideSeating(); + decideQueueOrder(); decideSeating (uses Probability: OptimalTableSelectionProbability); decideQueueOrder (uses Probability: QueueBalkingProbability); + evaluate(): boolean; + commit(): void; + getState(): String[][]"
CashRegister,- totalStoreIncome: double; - totalTips: double,"+ registerLoggables(); + triggerLog(); + processPayment(Server, Order, double tip); + recordTip(Server, double tip); + decidePaymentHandling(); + evaluate(): boolean; + commit(): void; + getState(): String[][]"
Table,- id: int; - capacity: int; - location: String; - occupied: boolean,+ registerLoggables(); + triggerLog(); + assignCustomer(Customer); + clearTable(); + decideClearTable(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Platter,- name: String; - ingredients: List<Ingredient>; - cookingTime: int; - price: double,+ registerLoggables(); + triggerLog(); + prepare(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Ingredient,- name: String; - quantity: double; - costPerUnit: double; - expiryDate: Date,+ registerLoggables(); + triggerLog(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Cook,- name: String; - skillLevel: int,+ registerLoggables(); + triggerLog(); + cook(Platter); + prep(Platter); + announceOrder(Table); + decideNextOrder(); + decideCookingPriority(); decideNextOrder (uses Probability: PrepTimeVariance); decideCookingPriority (uses Probability: CookingDelayRate); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Server,- name: String; - tablesAssigned: List<Table>,+ registerLoggables(); + triggerLog(); + serve(Table); + takeOrder(Customer); + deliverCheck(Customer); + returnPayment(CashRegister); + decideDeliverySequence(); + decideTipHandling(); decideDeliverySequence (uses Probability: ServiceDelayVariance); decideTipHandling (uses Probability: TipLikelihood); + evaluate(): boolean; + commit(): void; + getState(): String[][]
ServerTable,- bell: boolean; - orderQueue: Queue<Order>,+ registerLoggables(); + triggerLog(); + announceOrder(Order); + pickUpOrder(Server); + viewNextOrder(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Order,- platter: Platter; - table: Table; - timePlaced: int,+ registerLoggables(); + triggerLog(); + getTable(); + getPlatter(); + calculateTip(happiness: double); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Customer,- groupSize: int; - patience: int; - satisfaction: int; - tablePreference: String,+ registerLoggables(); + triggerLog(); + requestTable(String); + order(Platter); + leave(); + decideExit(); + decideReorder(); decideExit (uses Probability: PatienceThreshold); decideReorder (uses Probability: ReorderLikelihood); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Inventory,- ingredients: List<Ingredient>,+ registerLoggables(); + triggerLog(); + restock(); + checkStock(Platter); + decideRestockTiming(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Refrigerator,- capacity: double,+ registerLoggables(); + triggerLog(); + store(Ingredient); + remove(Ingredient); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Stove,- slots: int,+ registerLoggables(); + triggerLog(); + startCooking(Platter); + finishCooking(Platter); + evaluate(): boolean; + commit(): void; + getState(): String[][]
Finance,- fixedCosts: double; - laborCosts: double,+ registerLoggables(); + triggerLog(); + calculateNetRevenue(); + decideExpenseApproval(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
SimulationClock,- currentTime: int; - tickRate: int,+ advanceTime(); + scheduleEvent(); + getTime(); + decideNextEventTrigger(); + evaluate(): boolean; + commit(): void; + getState(): String[][]
SimulationManager,,"+ registerLoggables(objectName: String, logMap: Map<String, Supplier<Object>>); + logObject(objectName: String); + triggerLog(objectName: String); + loadInitFile(filename: String); + resetSimulation(); + saveState(filename: String); + setVCD(filename: String); + run(int): void; + stepOnce(): void; + getClock(): SimulationClock; + getProcesses(): List<SimProcess>; + startConsole(): void; + listObjects(): void; + showObject(String): void; + setValue(String, String, String): void; + startLogging(String): void; + stopLogging(): void; + logTick(int): void; + displayStates(): void"
