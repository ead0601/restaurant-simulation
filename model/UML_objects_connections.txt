object: "1. Restaurant"
stereotype: "«inherits SimEntity»"
constraint: "{manages operations}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- tables: List<Table>"
attribute: "- menu: List<Platter>"
attribute: "- staff: List<Staff>"
attribute: "- revenue: double"
attribute: "- avgWalkTime: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ simulateDay()"
method: "+ decideStaffing()"
method: "+ decideTableAssignments()"
method: "+ decideInventoryRestock()"
method: "decideStaffing (uses Probability: RushHourOverloadChance)"
method: "decideInventoryRestock (uses Probability: IngredientSpoilageRate)"
method: "+ getGlobals(): GlobalVariables"
method: "+ getDecisionEngine(): GlobalMethods"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "2. Hostess"
stereotype: "«inherits SimEntity»"
constraint: "{assigns tables}"
color: "#CCE5FF"
attribute: "- name: String"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ greetCustomer(Customer)"
method: "+ seatCustomer(Customer, Table)"
method: "+ decideTableAssignment(Customer)"
method: "+ releaseTableDecision(Table, Customer)"
method: "+ decideSeating()"
method: "+ decideQueueOrder()"
method: "decideSeating (uses Probability: OptimalTableSelectionProbability)"
method: "decideQueueOrder (uses Probability: QueueBalkingProbability)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "3. CashRegister"
stereotype: "«inherits SimEntity»"
constraint: "{tracks revenue}"
color: "#CCE5FF"
attribute: "- totalStoreIncome: double"
attribute: "- totalTips: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ processPayment(Server, Order, double tip)"
method: "+ recordTip(Server, double tip)"
method: "+ decidePaymentHandling()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "4. Table"
stereotype: "«inherits SimEntity»"
constraint: "{seating location}"
color: "#CCE5FF"
attribute: "- id: int"
attribute: "- capacity: int"
attribute: "- location: String"
attribute: "- occupied: boolean"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ assignCustomer(Customer)"
method: "+ clearTable()"
method: "+ decideClearTable()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "5. Platter"
stereotype: "«inherits SimEntity»"
constraint: "{cookable item}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- ingredients: List<Ingredient>"
attribute: "- cookingTime: int"
attribute: "- price: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ prepare()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "6. Ingredient"
stereotype: "«inherits SimEntity»"
constraint: "{perishable goods}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- quantity: double"
attribute: "- costPerUnit: double"
attribute: "- expiryDate: Date"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "7. Cook"
stereotype: "«inherits SimEntity»"
constraint: "{kitchen staff}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- skillLevel: int"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ cook(Platter)"
method: "+ prep(Platter)"
method: "+ announceOrder(Table)"
method: "+ decideNextOrder()"
method: "+ decideCookingPriority()"
method: "decideNextOrder (uses Probability: PrepTimeVariance)"
method: "decideCookingPriority (uses Probability: CookingDelayRate)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "8. Server"
stereotype: "«inherits SimEntity»"
constraint: "{floor staff}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- tablesAssigned: List<Table>"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ serve(Table)"
method: "+ takeOrder(Customer)"
method: "+ deliverCheck(Customer)"
method: "+ returnPayment(CashRegister)"
method: "+ decideDeliverySequence()"
method: "+ decideTipHandling()"
method: "decideDeliverySequence (uses Probability: ServiceDelayVariance)"
method: "decideTipHandling (uses Probability: TipLikelihood)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "9. ServerTable"
stereotype: "«inherits SimEntity»"
constraint: "{pickup counter}"
color: "#CCE5FF"
attribute: "- bell: boolean"
attribute: "- orderQueue: Queue<Order>"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ announceOrder(Order)"
method: "+ pickUpOrder(Server)"
method: "+ viewNextOrder()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "10. Order"
stereotype: "«inherits SimEntity»"
constraint: "{food request}"
color: "#CCE5FF"
attribute: "- platter: Platter"
attribute: "- table: Table"
attribute: "- timePlaced: int"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ getTable()"
method: "+ getPlatter()"
method: "+ calculateTip(happiness: double)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "11. Customer"
stereotype: "«inherits SimEntity»"
constraint: "{dining patron}"
color: "#CCE5FF"
attribute: "- groupSize: int"
attribute: "- patience: int"
attribute: "- satisfaction: int"
attribute: "- tablePreference: String"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ requestTable(String)"
method: "+ order(Platter)"
method: "+ leave()"
method: "+ decideExit()"
method: "+ decideReorder()"
method: "decideExit (uses Probability: PatienceThreshold)"
method: "decideReorder (uses Probability: ReorderLikelihood)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "12. Inventory"
stereotype: "«inherits SimEntity»"
constraint: "{stock control}"
color: "#CCE5FF"
attribute: "- ingredients: List<Ingredient>"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ restock()"
method: "+ checkStock(Platter)"
method: "+ decideRestockTiming()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "13. Refrigerator"
stereotype: "«inherits SimEntity»"
constraint: "{cold storage}"
color: "#CCE5FF"
attribute: "- capacity: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ store(Ingredient)"
method: "+ remove(Ingredient)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "14. Stove"
stereotype: "«inherits SimEntity»"
constraint: "{hot line}"
color: "#CCE5FF"
attribute: "- slots: int"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ startCooking(Platter)"
method: "+ finishCooking(Platter)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "15. Finance"
stereotype: "«inherits SimEntity»"
constraint: "{tracks profit}"
color: "#CCE5FF"
attribute: "- fixedCosts: double"
attribute: "- laborCosts: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ calculateNetRevenue()"
method: "+ decideExpenseApproval()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "16. SimulationClock"
stereotype: "«Utility»"
constraint: "{drives simulation}"
color: "#CCE5FF"
attribute: "- currentTime: int"
attribute: "- tickRate: int"
method: "+ advanceTime()"
method: "+ scheduleEvent()"
method: "+ getTime()"
method: "+ decideNextEventTrigger()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "19. SimulationManager"
stereotype: "«Simulation Kernel with Console & Waveform»"
constraint: "{drives simulation clk}"
color: "#CCE5FF"
method: "+ registerLoggables(objectName: String, logMap: Map<String, Supplier<Object>>)"
method: "+ logObject(objectName: String)"
method: "+ triggerLog(objectName: String)"
method: "+ loadInitFile(filename: String)"
method: "+ resetSimulation()"
method: "+ saveState(filename: String)"
method: "+ setVCD(filename: String)"
method: "+ run(int): void"
method: "+ stepOnce(): void"
method: "+ getClock(): SimulationClock"
method: "+ startConsole(): void"
method: "+ listObjects(): void"
method: "+ showObject(String): void"
method: "+ setValue(String, String, String): void"
method: "+ startLogging(String): void"
method: "+ stopLogging(): void"
method: "+ logTick(int): void"
method: "+ displayStates(): void"

connection: "1. Restaurant" -> "2. Hostess"
connection: "1. Restaurant" -> "4. Table"
connection: "1. Restaurant" -> "7. Cook"
connection: "1. Restaurant" -> "8. Server"
connection: "1. Restaurant" -> "12. Inventory"
connection: "1. Restaurant" -> "15. Finance"
connection: "2. Hostess" -> "11. Customer"
connection: "2. Hostess" -> "4. Table"
connection: "2. Hostess" -> "3. CashRegister"
connection: "4. Table" -> "11. Customer"
connection: "7. Cook" -> "5. Platter"
connection: "7. Cook" -> "12. Inventory"
connection: "7. Cook" -> "13. Refrigerator"
connection: "7. Cook" -> "14. Stove"
connection: "7. Cook" -> "9. ServerTable"
connection: "5. Platter" -> "6. Ingredient"
connection: "12. Inventory" -> "6. Ingredient"
connection: "12. Inventory" -> "13. Refrigerator"
connection: "8. Server" -> "4. Table"
connection: "8. Server" -> "10. Order"
connection: "8. Server" -> "3. CashRegister"
connection: "9. ServerTable" -> "10. Order"
connection: "9. ServerTable" -> "8. Server"
connection: "10. Order" -> "4. Table"
connection: "3. CashRegister" -> "15. Finance"
connection: "16. SimulationClock" -> "1. Restaurant"
connection: "16. SimulationClock" -> "7. Cook"
connection: "16. SimulationClock" -> "8. Server"
connection: "16. SimulationClock" -> "11. Customer"
connection: "16. SimulationClock" -> "2. Hostess"
connection: "19. SimulationManager" -> "1. Restaurant"
connection: "1. Restaurant" -> "19. SimulationManager"

object: "1. Restaurant"
stereotype: "«inherits SimEntity»"
constraint: "{manages operations}"
color: "#CCE5FF"
attribute: "- name: String"
attribute: "- tables: List<Table>"
attribute: "- menu: List<Platter>"
attribute: "- staff: List<Staff>"
attribute: "- revenue: double"
attribute: "- avgWalkTime: double"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ simulateDay()"
method: "+ decideStaffing()"
method: "+ decideTableAssignments()"
method: "+ decideInventoryRestock()"
method: "decideStaffing (uses Probability: RushHourOverloadChance)"
method: "decideInventoryRestock (uses Probability: IngredientSpoilageRate)"
method: "+ getGlobals(): GlobalVariables"
method: "+ getDecisionEngine(): GlobalMethods"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "2. Hostess"
stereotype: "«inherits SimEntity»"
constraint: "{assigns tables}"
color: "#CCE5FF"
attribute: "- name: String"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ greetCustomer(Customer)"
method: "+ seatCustomer(Customer, Table)"
method: "+ decideTableAssignment(Customer)"
method: "+ releaseTableDecision(Table, Customer)"
method: "+ decideSeating()"
method: "+ decideQueueOrder()"
method: "decideSeating (uses Probability: OptimalTableSelectionProbability)"
method: "decideQueueOrder (uses Probability: QueueBalkingProbability)"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "14. Stove"
stereotype: "«inherits SimEntity»"
constraint: "{hot line}"
color: "#CCE5FF"
attribute: "- slots: int"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ startCooking(Platter)"
method: "+ finishCooking(Platter)"
method: "+ advanceTime()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "17. Oven"
stereotype: "«inherits SimEntity»"
constraint: "{test appliance}"
color: "#CCE5FF"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ startCooking(Platter)"
method: "+ advanceTime()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"

object: "18. Microwave"
stereotype: "«inherits SimEntity»"
constraint: "{test appliance}"
color: "#CCE5FF"
method: "+ registerLoggables()"
method: "+ triggerLog()"
method: "+ startCooking(Platter)"
method: "+ advanceTime()"
method: "+ evaluate(): boolean"
method: "+ commit(): void"
method: "+ getState(): String[][]"